# develop自動マージの際に、カウントアップ
name: Update Version
on: 
  push:
  pull_request:
    types: 
      - closed
    branches: 
      - production
  workflow_dispatch:

jobs:
  calculate-new-version:
    runs-on: ubuntu-latest
    outputs: 
      new_version: ${{ steps.new_version_id.outputs.new_version_value }}
    steps:
      - name: checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: calculate-new-version
        id: new_version_id
        run: |
          # 定数定義
          MAX_MINOR=99
          MAX_REVISION=999
          
          # バージョン取得
          CURRENT_VERSION=`cat version.txt`
          CURRENT_MAJOR=`echo $CURRENT_VERSION | cut -d "." -f 1`
          CURRENT_MINOR=`echo $CURRENT_VERSION | cut -d "." -f 2`
          CURRENT_REVISION=`echo $CURRENT_VERSION | cut -d "." -f 3`

          # バージョンカウントアップ（基本、リビジョン+1で済む）
          NEW_MAJOR=`echo ${CURRENT_MAJOR}`
          NEW_MINOR=`echo ${CURRENT_MINOR}`
          NEW_REVISION=`expr $CURRENT_REVISION + 1`
          
          # リビジョンが最大値を超えた場合は、マイナーをカウントアップ
          if [ "$NEW_REVISION" -gt "$MAX_REVISION" ]; then
              NEW_MINOR=`expr $CURRENT_MINOR + 1`
              NEW_REVISION=0
             
              # マイナーが最大値を超えた場合は、メジャーをカウントアップ
              if [ "$NEW_MINOR" -gt "$MAX_MINOR" ]; then
                  NEW_MAJOR=`expr $CURRENT_MAJOR + 1`
                  NEW_MINOR=0
              fi
          fi

          # 最新バージョン生成
          new_version=`printf "%d.%02d.%03d" $NEW_MAJOR $NEW_MINOR $NEW_REVISION`
          echo "new_version_value=$new_version" >> $GITHUB_OUTPUT
  create-branch-list:
    runs-on: ubuntu-latest
    outputs: 
      branch_list: ${{ steps.branch_list.outputs.branch_list }}
    steps:
      - name: checkout main repository
        uses: actions/checkout@v3
        
      - name: create branch list
        id: branch_list
        run: |
          git fetch
          target_branches=$(git branch -a | grep remotes/origin/develop/ | sed s@remotes/origin/@\"@ | sed s/$/\",/ | sort )
          branches=$(echo $target_branches | sed s/,$// )
          echo "branch_list=[ $branches ]" >> $GITHUB_OUTPUT

  update-version-branch-unit:
    needs: [calculate-new-version, create-branch-list]
    runs-on: ubuntu-latest
    env: 
      NEW_VERSION: ${{ needs.calculation-new-version.outputs.new_version }}
    strategy:
      max-parallel: 1
      matrix:
        branch: ${{ fromJson(needs.create-branch-list.outputs.branch_list) }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ matrix.branch }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: update-version
        run: |
          # ここの認証なんとかしたい。トークン設定にしよう。
          #git config --global user.email "shok2gok.tdos3ky@icloud.com"
          #git config --global user.name "0511junpei"
          #git pull
        
          # ローカルブランチ作成
          #git checkout -b ${{ matrix.branch }}-automerge remotes/origin/${{ matrix.branch }}
          #git checkout remotes/origin/HEAD
          #git merge -m "Auto Merge 'main' To "${{ matrix.branch }} remotes/origin/${{ matrix.branch }} --allow-unrelated-histories
          #test=`git merge remotes/origin/${{ matrix.branch }} --allow-unrelated-histories`
          #echo $test
          #git log -n 20
          
          #git commit -m "Auto Merge 'main' To "${{ matrix.branch }}
          #git push remotes/origin/${{ matrix.branch }}
          cat version.txt > ${ env.NEW_VERSION }
          cat version.txt
          git add version.txt
          git commit -m "Automatic merge by version update（"${ env.NEW_VERSION }"） for GitHub Actions"

  #update-branches:
  #  needs: calculation-new-version
  #  uses: 0511junpei/Test/.github/workflows/Test2.yml@main
  #  with:
  #    version: ${{ needs.calculation-new-version.outputs.new_version }}
